{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  ALL NECESSARY IMPORTS ::"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#product for generating all permutations for seed selection parameter fine-tuning\n",
    "from itertools import product\n",
    "#itemgetter for sorting lists of tuples / dicts by their second element / value\n",
    "from operator import itemgetter\n",
    "#math.log for calculating logs of probabilities in WC1 and WC2\n",
    "from math import log\n",
    "#copy.deepcopy for deepcopying graphs in seed selection models\n",
    "from copy import deepcopy\n",
    "#numpy to manipulate lists, calculate means, etc.\n",
    "import numpy as np\n",
    "#\n",
    "import pandas as pd\n",
    "#time.time to calculate and compare running time and efficiency\n",
    "from time import time\n",
    "#Counter to count frequencies in lists, for averaging edges in seed selection models\n",
    "from collections import Counter\n",
    "#networkx to generate and handle networks from data\n",
    "import networkx as nx\n",
    "#csv to extract network data from .csv files\n",
    "import csv\n",
    "#winsound to alert me when propagation is complete for long proccessing periods\n",
    "import winsound\n",
    "#matplotlib.pyplot for plotting graphs and charts\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.cm\n",
    "#matplotlib.offsetbox.AnchoredText for anchored textboxes on plotted figures\n",
    "from matplotlib.offsetbox import AnchoredText\n",
    "\n",
    "#Dataset dictionary\n",
    "#Title : weighted, directed, filepath to .csv file\n",
    "datasets = {\n",
    "    #BitcoinOTC dataset (5881 nodes, 35592 edges)\n",
    "    #(directed, weighted, signed)\n",
    "    \"BitcoinOTC\": (True, True, \n",
    "         r\"D:\\Sully\\Documents\\Computer Science BSc\\Year 3\\Term 2\\Individual Project\\datasets\\soc-sign-bitcoinotc.csv\"),\n",
    "    #Facebook dataset (4039 nodes, 88234 edges)\n",
    "    #(undirected, unweighted, unsigned)\n",
    "    \"Facebook\": (False, False, \n",
    "         r\"D:\\Sully\\Documents\\Computer Science BSc\\Year 3\\Term 2\\Individual Project\\datasets\\facebook.csv\")\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  CASCADE, ITERATION, PROPAGATION & SUCCESS FUNCTIONS ::\n",
    "#\n",
    "#  Functions to perform cascade & propagation on a given graph \n",
    "#  with a given seed set and a given number of iterations of a \n",
    "#  given cascade model.\n",
    "#\n",
    "#  Functions included:\n",
    "#  1. Model-specific success functions\n",
    "#  2. Propagation function\n",
    "#  3. Iteration function\n",
    "#  4. Cascade (ties everything together) function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Determine propagation success for the various models\n",
    "#(includes quality factor to differentiate positive/negative influence)\n",
    "#(includes a switch penalty for nodes switching sign)\n",
    "\n",
    "#Apply quality factor and switch factor variables\n",
    "def successVars(sign, switch, qf, sf):\n",
    "    if not switch:\n",
    "        sf = 0\n",
    "    if not sign:\n",
    "        qf = (1-qf)\n",
    "    return qf*(1-sf)\n",
    "\n",
    "#Calculate whether propagation is successful (model-specific)\n",
    "def success(successModel, sign, switch, timeDelay, g, target, targeting, pp, qf, sf, a):\n",
    "    if successModel == 'ICu':\n",
    "        succ = (pp*successVars(sign, switch, qf, sf)*timeDelay)\n",
    "    elif successModel == 'IC':\n",
    "        succ = (pp*successVars(sign, switch, qf, sf)*g[targeting][target]['trust']*timeDelay)\n",
    "    elif successModel == 'WC1':\n",
    "        if a:\n",
    "            recip = g.nodes[target]['degRecip']\n",
    "        else:\n",
    "            recip = (1 / g.in_degree(target))\n",
    "        succ = (recip*successVars(sign, switch, qf, sf)*timeDelay*g[targeting][target]['trust'])\n",
    "    elif successModel == 'WC2':\n",
    "        if a:\n",
    "            relDeg = g[targeting][target]['relDeg']\n",
    "        else:\n",
    "            snd = sum([(g.out_degree(neighbour)) for neighbour in g.predecessors(target)])\n",
    "            relDeg = (g.out_degree(targeting) / snd)\n",
    "            #relDeg = mmNormalizeSingle(log(g.out_degree(targeting)/snd))\n",
    "        succ = (relDeg*successVars(sign, switch, qf, sf)*timeDelay*g[targeting][target]['trust'])\n",
    "    return np.random.uniform(0,1) < succ\n",
    "\n",
    "#Returns probability with only the variables\n",
    "#(no trust values, degree reciprocals or relational degrees)\n",
    "def basicProb(weighted=False, *nodes):\n",
    "    return pp * successVars(True, False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#One complete turn of propagation from a given set of the newly\n",
    "#  activated (positive & negative) nodes from the last turn.\n",
    "#(1. new negative nodes attempt to negatively influence their neighbours)\n",
    "#(2. new positive nodes attempt to positively influence their neighbours)\n",
    "#(3. new positive nodes attempt to negatively influence their neighbours)\n",
    "def propagateTurn(g, pn, pos, nn, neg, trv, td, successMod, pp, qf, sf, a):\n",
    "    posCurrent, negCurrent = set(), set()\n",
    "    for node in nn:\n",
    "        for neighbour in g.neighbors(node):\n",
    "            if (node, neighbour) not in trv:\n",
    "                #Negative influence to neighbours of negative nodes\n",
    "                if success(successMod, False, (neighbour in pos), td, g, neighbour, node, pp, qf, sf, a):\n",
    "                    negCurrent.add(neighbour)\n",
    "                trv.add((node, neighbour))\n",
    "    for node in pn:\n",
    "        for neighbour in g.neighbors(node):\n",
    "            if (node, neighbour) not in trv:\n",
    "                #Positive influence to neighbours of positive nodes\n",
    "                if neighbour not in negCurrent and success(successMod, True, (neighbour in neg), td, g, neighbour, node, pp, qf, sf, a):\n",
    "                    posCurrent.add(neighbour)\n",
    "                #Negative influence to neighbours of positive nodes\n",
    "                elif neighbour not in negCurrent and neighbour not in posCurrent and success(successMod, False, (neighbour in pos), td, g, neighbour, node, pp, qf, sf, a):\n",
    "                    negCurrent.add(neighbour)\n",
    "                trv.add((node, neighbour))\n",
    "    return(posCurrent, negCurrent, trv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate average positive spread over a given number of iterations\n",
    "def iterate(g, s, its, successFunc, pp, qf, sf, tf, retNodes, a):\n",
    "    #If no number of iterations is given, one is calculated based on the\n",
    "    #  ratio of nodes to edges within the graph, capped at 2000.\n",
    "    if not its:\n",
    "        neRatio = (len(g)/(g.size()))\n",
    "        if neRatio > 0.555:\n",
    "            its = 2000\n",
    "        else:\n",
    "            its = ((neRatio/0.165)**(1/1.75))*1000\n",
    "    influence = []\n",
    "    for i in range(its):\n",
    "        #Randomness seeded per iteration for repeatability & robustness\n",
    "        np.random.seed(i)\n",
    "        positive, posNew, negative, negNew, traversed, timeFactor = set(), set(s), set(), set(), set(), 1\n",
    "        #while there are newly influenced nodes from last turn...\n",
    "        while posNew or negNew:\n",
    "            #new nodes assigned to placeholder variables\n",
    "            posLastTurn, negLastTurn = posNew, negNew\n",
    "            #propagation turn is performed, returning positive&negative nodes and traversed edges\n",
    "            posNew, negNew, traversed = propagateTurn(g, posNew, positive, negNew, negative, traversed, timeFactor, successFunc, pp, qf, sf, a)\n",
    "            #Positive and negative nodes are recalculated\n",
    "            positive, negative = (positive.union(posNew, posLastTurn) - negNew), (negative.union(negNew, negLastTurn) - posNew)\n",
    "            #Time delay is taken away from the time factor\n",
    "            if timeFactor < 0:\n",
    "                timeFactor = 0\n",
    "            else:\n",
    "                timeFactor -= tf\n",
    "        if retNodes:\n",
    "            #Positive nodes added to list\n",
    "            for p in positive:\n",
    "                influence.append(p)\n",
    "            #Number of nodes added to list\n",
    "            infCount.append(len(positive))\n",
    "        else:\n",
    "            #Number of positive nodes added to list\n",
    "            influence.append(len(positive))\n",
    "    #If nodes are being returned\n",
    "    if retNodes:\n",
    "        #Average list of positive nodes are returned\n",
    "        counts = Counter(influence)\n",
    "        result = (sorted(counts, key=counts.get, reverse=True))[:int(np.mean(infCount))]\n",
    "    #If nodes aren't being returned\n",
    "    else:\n",
    "        #Mean is returned\n",
    "        result = np.mean(influence)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Determine the cascade model and run the iteration function \n",
    "#  with the appropriate success function\n",
    "def cascade(g, s, its=0, \n",
    "            model='IC', assign=1, ret=False, \n",
    "            pp=0.2, qf=0.6, sf=0.7, tf=0.04):\n",
    "    #g = graph, s = set of seed nodes, its = num of iterations\n",
    "    #model = cascade model, #assign model, #return nodes?\n",
    "    #pp = propagation probability, qf = quality factor\n",
    "    #sf = switch factor, tf = time factor\n",
    "    #Model is determined and appropriate success function is assigned\n",
    "    #print(f'model = {model},  assign = {assign}  its = {its}\\npp = {pp}, qf = {qf}, sf = {sf}, tf = {tf} \\n')\n",
    "    if model != 'IC' and model != 'ICu' and assign:\n",
    "        assignSelect(g, model, assign)\n",
    "    success = model\n",
    "    return iterate(g, s, its, success, pp, qf, sf, tf, ret, assign)\n",
    "\n",
    "#Propagation models and their names are compiled into a list\n",
    "propMods = [('IC', \"Independent Cascade\"), \n",
    "            ('WC1', \"Weighted Cascade 1\"), \n",
    "            ('WC2', \"Weighted Cascade 2\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  NETWORK GRAPH SETUP ::\n",
    "#\n",
    "#  Functions to generate network graphs from various csv files,\n",
    "#  and assign meaningful attributes to the nodes/edges to save\n",
    "#  processing time during propagation.\n",
    "#\n",
    "#  Real datasets/graphs included:\n",
    "#  1. soc-BitcoinOTC\n",
    "#  2. ego-Facebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Removes any unconnected components of a given graph\n",
    "def removeUnconnected(g):\n",
    "    components = sorted(list(nx.weakly_connected_components(g)), key=len)\n",
    "    while len(components)>1:\n",
    "        component = components[0]\n",
    "        for node in component:\n",
    "            g.remove_node(node)\n",
    "        components = components[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Generates NetworkX graph from given file path:\n",
    "def generateNetwork(name, weighted, directed, path):\n",
    "    #graph is initialized and named, dataframe is initialized\n",
    "    newG = nx.DiGraph(Graph = name)\n",
    "    data = pd.DataFrame()\n",
    "    #pandas dataframe is read from .csv file,\n",
    "    #  with weight if weighted, without if not\n",
    "    if weighted:\n",
    "        data = pd.read_csv(path, header=None, usecols=[0,1,2],\n",
    "                           names=['Node 1', 'Node 2', 'Weight'])\n",
    "    else:\n",
    "        data = pd.read_csv(path, header=None, usecols=[0,1],\n",
    "                           names=['Node 1', 'Node 2'])\n",
    "        data['Weight'] = 1\n",
    "    #offset is calculated from minimum nodes\n",
    "    offset = min(data[['Node 1', 'Node 2']].min())\n",
    "    #each row of dataframe is added to graph as an edge\n",
    "    for row in data.itertuples(False, None):\n",
    "        #trust=weight, & distance=(1-trust)\n",
    "        trustval = row[2]\n",
    "        newG.add_edge(row[1]-offset, row[0]-offset, \n",
    "                      trust=trustval, distance=(1-trustval))\n",
    "        #if graph is undirected, edges are added again in reverse\n",
    "        if not directed:\n",
    "            newG.add_edge(row[0]-offset, row[1]-offset, \n",
    "                          trust=trustval, distance=(1-trustval))\n",
    "    #unconnected components are removed\n",
    "    if directed:\n",
    "        removeUnconnected(newG)\n",
    "    return newG"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "#Generate graphs and compile into dictionaries:\n",
    "\n",
    "#Dictionaries for groups of graphs are intialized\n",
    "graphs, mockGraphs, rndmGraphs, diGraphs, allGraphs = {}, {}, {}, {}, {}\n",
    "\n",
    "#Generate graphs from real datasets using the datasets dictionary\n",
    "for g in datasets:\n",
    "    realGraph = generateNetwork((g + \" Network\"), \n",
    "                                datasets[g][0], datasets[g][1], \n",
    "                                datasets[g][2])\n",
    "    graphs[g], diGraphs[g], allGraphs[g] = realGraph, realGraph, realGraph\n",
    "\n",
    "\n",
    "#Generate various mock graphs for testing and debugging:\n",
    "\n",
    "#Custom, small directed, unweighted graph\n",
    "mockG, name = nx.DiGraph(), \"mock1: Custom, small\"\n",
    "testedges = [(1,2), (2,4), (2,5), (2,6), (3,5), (4,5), (5,9), (5,10), (6,8),\n",
    "            (7,8), (8,9)]\n",
    "mockG.add_edges_from(testedges)\n",
    "nx.set_edge_attributes(mockG, 1, 'trust')\n",
    "mockGraphs[name], diGraphs[name], allGraphs[name] = mockG, mockG, mockG\n",
    "\n",
    "#Medium-sized path graph\n",
    "#(each node only has edges to the node before and/or after it)\n",
    "mockG, name = nx.path_graph(100), \"mock2: Path graph, 100 nodes\"\n",
    "nx.set_edge_attributes(mockG, 1, 'trust')\n",
    "mockGraphs[name], allGraphs[name] = mockG, mockG\n",
    "\n",
    "#Medium-sized, randomly generated directed, unweighted graph\n",
    "mockG, name = nx.DiGraph(), \"mock3: Random, trustvals=1\"\n",
    "for i in range(50):\n",
    "    for j in range(10):\n",
    "        targ = np.random.randint(-40,50)\n",
    "        if targ > -1:\n",
    "            mockG.add_edge(i, targ)\n",
    "mockGraphs[name], rndmGraphs[name], diGraphs[name], allGraphs[name] = mockG, mockG, mockG, mockG\n",
    "\n",
    "#Medium-sized, randomly generated directed, randomly-weighted graph\n",
    "mockG, name = nx.DiGraph(), \"mock4: Random, trustvals=random\"\n",
    "for i in range(50):\n",
    "    for j in range(10):\n",
    "        targ = np.random.randint(-40,50)\n",
    "        if targ > -1:\n",
    "            tru = np.random.uniform(0,1)\n",
    "            mockG.add_edge(i, targ, trust=tru)\n",
    "mockGraphs[name], rndmGraphs[name], diGraphs[name], allGraphs[name] = mockG, mockG, mockG, mockG\n",
    "\n",
    "#Functional testing for new graphing method\n",
    "\"\"\"\n",
    "for gl in [realGraphs, mockGraphs]:\n",
    "    for g in gl:\n",
    "        print(g + \": \" + str(gl[g].size()))\n",
    "        print(g + \": \" + str(len(gl[g])) + \"\\n\")\n",
    "#\"\"\"\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalize (Min-Max) every value in a given dictionary (method 2 & 3)\n",
    "def mmNormalizeDict(dic, elMax, elMin):\n",
    "    #for key, value in dic.items():\n",
    "    #    dic[key] = ((value - elMin) / (elMax - elMin))\n",
    "    #printResults(\"Assigned\", dic.values())\n",
    "    #print(\"Assigned normalization:\\nMax = \" + str(elMax) + \"\\nMin = \" \n",
    "    #      + str(elMin) + \"\\nMean = \" \n",
    "    #      + str(np.mean(list(dic.values()))))\n",
    "    #return dic\n",
    "    return {key: ((val - elMin)/(elMax - elMin)) for key,val in dic.items()}\n",
    "\n",
    "#Min-Max Normalize a given list (method 1)\n",
    "def mmNormalizeLis(lis):\n",
    "    elMax, elMin = max(lis), min(lis)\n",
    "    return list(map(lambda x : ((x - elMin)/(elMax - elMin)), lis))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "#Assign method 1 - manual\n",
    "\n",
    "#Calculate all relational degrees for a graph\n",
    "def allRelDegs1(g):\n",
    "    allRds = []\n",
    "    for target in g:\n",
    "        if not g.in_degree(target):\n",
    "            continue\n",
    "        snd = 0\n",
    "        for neighbour in g.predecessors(target):\n",
    "            snd += g.out_degree(neighbour)\n",
    "        for targeting in g.predecessors(target):\n",
    "            allRds.append(log(g.out_degree(targeting) / snd))\n",
    "    return allRds\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "relDegsTest1 = allRelDegs(graphs['Facebook'])\n",
    "\n",
    "elMax, elMin = max(relDegsTest1), min(relDegsTest1)\n",
    "relDegsTest2 = mmNormalizeLis(relDegsTest1)\n",
    "\n",
    "#Min-max normalize a single value, given the needed max & min\n",
    "def mmNormalizeSingle(val, elMax, elMin):\n",
    "    return ((val - elMin)/(elMax - elMin))\n",
    "\"\"\"\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "\n",
    "#AllRelDegs for dictionary, to check functionality after finding\n",
    "#  errors - \n",
    "#Normalizes return dict and compares it to dict from assign method 3.\n",
    "def allRelDegs2(g):\n",
    "    allRdsDict = {}\n",
    "    for target in g:\n",
    "        if not g.in_degree(target):\n",
    "            continue\n",
    "        snd = 0\n",
    "        for neighbour in g.predecessors(target):\n",
    "            snd += g.out_degree(neighbour)\n",
    "        for targeting in g.predecessors(target):\n",
    "            rdval = log(g[targeting][target]['trust']*(g.out_degree(targeting) / snd))\n",
    "            allRdsDict[(targeting, target)] = log((g.out_degree(targeting) / snd))\n",
    "    return allRdsDict\n",
    "\n",
    "#relDegsTest1 = allRelDegs(graphs['Facebook'])\n",
    "relDegsTest1, relDegsTestDict = allRelDegs(graphs['Facebook'])\n",
    "elMax, elMin = max(relDegsTest1), min(relDegsTest1)\n",
    "relDegsTest2 = mmNormalizeLis(relDegsTest1)\n",
    "#relDegsTest3 = mmNormalizeDict(relDegsTestDict, \n",
    " #                              max(relDegsTestDict.values()), \n",
    " #                              min(relDegsTestDict.values()))\n",
    "\n",
    "\n",
    "\n",
    "#Printing averages, maximums & minimums to find the\n",
    "#  error from the initial erroneous results\n",
    "printResults(\"Test list: \", relDegsTest1)\n",
    "printResults(\"Test normalized list: \", relDegsTest2)\n",
    "printResults(\"Test normalized dict v1: \", list(relDegsTestDict.values()))\n",
    "printResults(\"Test normalized dict v2: \", list(relDegsTest3)\n",
    "\"\"\"\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Methods that assign probabilities for WC1 & WC2 to nodes or edges\n",
    "\n",
    "#Calculate manipulated degree-reciprocals for all nodes in a graph, and\n",
    "#  assign them as node attributes for the Weighted Cascade 1 model\n",
    "\n",
    "#Log-scaling method - default if not specified\n",
    "def assignRecips1(g):\n",
    "    drs = {}\n",
    "    for target in g:\n",
    "        if not g.in_degree(target):\n",
    "            continue\n",
    "        drs[target] = log(1 / g.in_degree(target))\n",
    "    elMax = drs[max(drs, key=drs.get)]\n",
    "    elMin = drs[min(drs, key=drs.get)]\n",
    "    drs = mmNormalizeDict(drs, elMax, elMin)\n",
    "    nx.set_node_attributes(g, drs, \"degRecip\")\n",
    "\n",
    "#Square-rooting method\n",
    "def assignRecips2(g):\n",
    "    drs = {}\n",
    "    for target in g:\n",
    "        if not g.in_degree(target):\n",
    "            continue\n",
    "        drs[target] = ((1 / g.in_degree(target)) ** (1/2))\n",
    "    nx.set_node_attributes(g, drs, \"degRecip\")\n",
    "    \n",
    "#Cube-rooting method\n",
    "def assignRecips3(g):\n",
    "    drs = {}\n",
    "    for target in g:\n",
    "        if not g.in_degree(target):\n",
    "            continue\n",
    "        drs[target] = ((1 / g.in_degree(target)) ** (1/3))\n",
    "    nx.set_node_attributes(g, drs, \"degRecip\")\n",
    "    \n",
    "#Calculate manipulated relational-degrees for all edges in a graph, and\n",
    "#  assign them as edge attributes for the Weighted Cascade 2 model\n",
    "    \n",
    "#Log-scaling method\n",
    "def assignRelDegs1(g):\n",
    "    rds = {}\n",
    "    for target in g:\n",
    "        if not g.in_degree(target):\n",
    "            continue\n",
    "        snd = 0\n",
    "        for targeting in g.predecessors(target):\n",
    "            snd += g.out_degree(targeting)\n",
    "        for targeting in g.predecessors(target):\n",
    "            rds[(targeting, target)] = log(g.out_degree(targeting) / snd)\n",
    "    #elMax = rds[max(rds, key=rds.get)]\n",
    "    #elMin = rds[min(rds, key=rds.get)]\n",
    "    rds = mmNormalizeDict(rds, max(rds.values()), min(rds.values()))\n",
    "    nx.set_edge_attributes(g, rds, \"relDeg\")\n",
    "    \n",
    "#Square-rooting method\n",
    "def assignRelDegs2(g):\n",
    "    rds = {}\n",
    "    for target in g:\n",
    "        if not g.in_degree(target):\n",
    "            continue\n",
    "        snd = 0\n",
    "        for targeting in g.predecessors(target):\n",
    "            snd += g.out_degree(targeting)\n",
    "        for targeting in g.predecessors(target):\n",
    "            rds[(targeting, target)] = (((g.out_degree(targeting)) / snd) ** (1/2))\n",
    "    nx.set_edge_attributes(g, rds, \"relDeg\")\n",
    "\n",
    "#Cube-rooting method\n",
    "def assignRelDegs3(g):\n",
    "    rds = {}\n",
    "    for target in g:\n",
    "        if not g.in_degree(target):\n",
    "            continue\n",
    "        snd = sum([(g.out_degree(neighbour)) \n",
    "                   for neighbour in g.predecessors(target)])\n",
    "        for targeting in g.predecessors(target):\n",
    "            rds[(targeting, target)] = (((g.out_degree(targeting)) / snd) ** (1/3))\n",
    "    nx.set_edge_attributes(g, rds, \"relDeg\")\n",
    "\n",
    "#Assign method dictionary for selection depending on parameters\n",
    "assignMods = {'WC1': {1: assignRecips1, 2: assignRecips2, 3: assignRecips3}, \n",
    "              'WC2': {1: assignRelDegs1, 2: assignRelDegs2, 3:assignRelDegs3}}\n",
    "\n",
    "#Selects and runs appropriate assigning method\n",
    "def assignSelect(g, propMod, assignMod):\n",
    "    if assignMod:\n",
    "        assignMods[propMod][assignMod](g)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "#Assign method 1 - manual\n",
    "\n",
    "#Calculate all relational degrees\n",
    "def allRelDegs(g):\n",
    "    #allRds = []\n",
    "    allRds, allRdsDict = [], {}\n",
    "    for target in g:\n",
    "        if not g.in_degree(target):\n",
    "            continue\n",
    "        snd = sum([g.out_degree(neighbour) \n",
    "                   for neighbour in g.predecessors(target)])\n",
    "        #print(\"\\nSND = \" + str(snd) + \"\\n\")\n",
    "        for targeting in g.predecessors(target):\n",
    "            rdval = log(g[targeting][target]['trust']*(g.out_degree(targeting) / snd))\n",
    "            allRds.append(rdval)\n",
    "            allRdsDict[(targeting, target)] = log((g.out_degree(targeting) / snd))\n",
    "    return allRds, allRdsDict\n",
    "\n",
    "\n",
    "\n",
    "#Functionality & quality testing of assignment functions\n",
    "\"\"\"\n",
    "for assignTest in [0,1]:\n",
    "    print('assign method: ' + str(assignTest))\n",
    "    measureTime1(cascade, graphs['Facebook'], [1], 15, 'WC2', assignTest, \n",
    "                 0.5, 0.7, 0.7, 0.08)\n",
    "    print(\"\")\n",
    "#\"\"\"\n",
    "print(\"\")\n",
    "\n",
    "#Results: (S=[1], 75its, pp=0.5, qf=0.7, sf=0.7, tf=0.04)\n",
    "#Manual log-scaling----------1.427 spread, 0.368secs\n",
    "#Pre-assigned log-scaling----888.773 spread, 77.491secs\n",
    "#Initially not equal --> typo in allRelDegs (return line indented so no loop)\n",
    "#Due to the typo these results are erroneous\n",
    "\n",
    "#Lowered iterations due to it taking so long to process the manual method\n",
    "#Results: (S=[1], 75its, pp=0.5, qf=0.7, sf=0.7, tf=0.04)\n",
    "#Manual log-scaling---------1188.533 spread, 328.085secs\n",
    "#Pre-assigned log-scaling---1188.533 spread, 13.405secs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  MISCALLANEOUS & UTILITY METHODS/FUNCTIONS ::\n",
    "#\n",
    "#  Methods & functions for various purposes, that are either required\n",
    "#  in other sections of the program or optimize their performance.\n",
    "#\n",
    "#  Methods/Functions included:\n",
    "#  1. Measure time/speed of a given function\n",
    "#  2. Min-max normalize a given dictionary, scaling between 0 and 1.\n",
    "#  3. Draw a histogram from a given dictionary of probabilities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Time measuring functions\n",
    "\n",
    "#Measure the time taken to perform a given function\n",
    "def measureTime1(func, *pars):\n",
    "    startT = time()\n",
    "    print(func(*pars))\n",
    "    print(str(time() - startT) + \"\\n\")\n",
    "\n",
    "#Same as measureTime, but also returns the result from the given function\n",
    "def measureTimeRet(func, *pars):\n",
    "    startT = time()\n",
    "    return func(*pars), round((time() - startT), 3)\n",
    "    \n",
    "#Same as measureTime1, but prints a given message initially\n",
    "def measureTime2(msg, func, *pars):\n",
    "    print(msg + \":\")\n",
    "    startT = time()\n",
    "    print(func(*pars))\n",
    "    print(str(time() - startT) + \" secs\\n\")\n",
    "\n",
    "#Given a seed selection model, and can also take parameters for that, selects a seed set and \n",
    "#  measures the time taken to do so. Checks this seed set hasn't already been propagated to, \n",
    "#  and if it hasnt't performs a given propagation model on it and measures the time it took.\n",
    "#Also returns the seed set, so that it can be added to the set of propagated-to seed sets.\n",
    "def measureTime3(seedSel, propMod, oldSeeds, g, qty, its, *params):\n",
    "    print(seedSel[1] + \" Seed Selection:\")\n",
    "    startT = time()\n",
    "    S = set(seedSel[0](g, qty, *params))\n",
    "    print(str(S) + \"\\n\" + str(time() - startT) + \"\\n\")\n",
    "    found = False\n",
    "    for oldSeedSet in oldSeeds:\n",
    "        if S in oldSeedSet:\n",
    "            found = True\n",
    "            print(seedSel[1] + \"has the same seed set as \" + oldSeedSet[1] + \n",
    "                  \". No need for propagation, check previous results.\\n\")\n",
    "    if found:\n",
    "        return S\n",
    "    print(propMod[1] + \": (\" + str(its) + \" iterations)\")\n",
    "    startT = time()\n",
    "    print(str(cascade(g, S, its, propMod[0])))\n",
    "    print(str(time() - startT) + \"\\n\\n\")\n",
    "    return S\n",
    "\n",
    "#Same as measureTime3 without the old seed checking\n",
    "def measureTime4(seedSel, propMod, oldSeeds, g, qty, its, *params):\n",
    "    print(seedSel[1] + \" Seed Selection:\")\n",
    "    startT = time()\n",
    "    S = set(seedSel[0](g, qty, *params))\n",
    "    print(str(S) + \"\\n\" + str(time() - startT) + \"\\n\")\n",
    "    print(propMod[1] + \": (\" + str(its) + \" iterations)\")\n",
    "    startT = time()\n",
    "    print(str(cascade(g, S, its, propMod[0])))\n",
    "    print(str(time() - startT) + \"\\n\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "QualityFactor = 0.2\n",
      "Switch factor = 0\n",
      "(14.6, 2245.52)\n",
      "\n",
      "QualityFactor = 0.2\n",
      "Switch factor = 0.2\n",
      "(14.84, 2249.68)\n",
      "\n",
      "QualityFactor = 0.2\n",
      "Switch factor = 0.4\n",
      "(18.32, 2243.64)\n",
      "\n",
      "QualityFactor = 0.2\n",
      "Switch factor = 0.6\n",
      "(20.0, 2239.04)\n",
      "\n",
      "QualityFactor = 0.2\n",
      "Switch factor = 0.8\n",
      "(24.6, 2229.84)\n",
      "\n",
      "QualityFactor = 0.2\n",
      "Switch factor = 1\n",
      "(37.24, 2218.96)\n",
      "\n",
      "QualityFactor = 0.8\n",
      "Switch factor = 0\n",
      "(1854.56, 416.16)\n",
      "\n",
      "QualityFactor = 0.8\n",
      "Switch factor = 0.2\n",
      "(1865.32, 404.52)\n",
      "\n",
      "QualityFactor = 0.8\n",
      "Switch factor = 0.4\n",
      "(1868.28, 389.92)\n",
      "\n",
      "QualityFactor = 0.8\n",
      "Switch factor = 0.6\n",
      "(1874.72, 381.92)\n",
      "\n",
      "QualityFactor = 0.8\n",
      "Switch factor = 0.8\n",
      "(1892.92, 375.24)\n",
      "\n",
      "QualityFactor = 0.8\n",
      "Switch factor = 1\n",
      "(1903.64, 359.6)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#switch factor testing against quality factor\n",
    "for q in [0.2, 0.8]:\n",
    "    for sw in [0, 0.2, 0.4, 0.6, 0.8, 1]:\n",
    "        print(\"QualityFactor = \" + str(q) + \"\\nSwitch factor = \" + str(sw))\n",
    "        print(cascade(graphs['BitcoinOTC'], [1], 25, qf=q, sf=sw))\n",
    "        print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  TIME-TESTING METHODS/FUNCTIONS ::\n",
    "#\n",
    "#  Methods & functions for testing processing times for cascade functions, \n",
    "#  varying the number of iterations, variables used and the variables' values.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Random seed selection model for functionality \n",
    "#  testing & variable comparison testing\n",
    "def randomSeeds(g, k):\n",
    "    return set(np.random.choice(g, k, replace=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Compare positive influence spreads for a given list of graphs with \n",
    "#  a range of different parameter values, and plot a line graph to show.\n",
    "def compareVars(g, gs, S, its, model, vss):\n",
    "    values = []\n",
    "    order = 0\n",
    "    for c, vs in enumerate(vss):\n",
    "        if vs[0] == 'pp':\n",
    "            startTime = time()\n",
    "            values.append([cascade(gs[g], S, its, model, pp=v) for v in vs[2]])\n",
    "            print(\"Variable: \" + vs[0] + \"\\n\" + str(values[order]) + \"\\n\" + \n",
    "                  str(round((time() - startTime), 5)) + \" secs\\n\") \n",
    "            vs[1] = order\n",
    "            order += 1\n",
    "        elif vs[0] == 'qf':\n",
    "            startTime = time()\n",
    "            values.append([cascade(gs[g], S, its, model, qf=v) for v in vs[2]])\n",
    "            print(\"Variable: \" + vs[0] + \"\\n\" + str(values[order]) + \"\\n\" + \n",
    "                  str(round((time() - startTime), 5)) + \" secs\\n\")        \n",
    "            vs[1] = order\n",
    "            order += 1\n",
    "        elif vs[0] == 'sf':\n",
    "            startTime = time()\n",
    "            values.append([cascade(gs[g], S, its, model, sf=v) for v in vs[2]])\n",
    "            print(\"Variable: \" + vs[0] + \"\\n\" + str(values[order]) + \"\\n\" + \n",
    "                  str(round((time() - startTime), 5)) + \" secs\\n\")        \n",
    "            vs[1] = order\n",
    "            order += 1\n",
    "        else:\n",
    "            startTime = time()\n",
    "            values.append([cascade(gs[g], S, its, model, tf=v) for v in vs[2]])\n",
    "            print(\"Variable: \" + vs[0] + \"\\n\" + str(values[order]) + \"\\n\" + \n",
    "                  str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "            vs[1] = order\n",
    "            order += 1\n",
    "    figs, axs = plt.subplots(figsize=(10,6))\n",
    "    axs.set_xlabel(\"Variable Probabilities\")\n",
    "    axs.set_ylabel(\"Spread\")\n",
    "    axs.set_title(g + \"\\n\" + \n",
    "                  \"Probabilitiy Comparison: \" + model)\n",
    "    for c, vs in enumerate(vss):\n",
    "        axs.plot(vs[2], values[vs[1]], label=vs[0], marker='o', markersize=4)\n",
    "    axs.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Compare positive influence spreads for a given list of graphs with \n",
    "#  a range of different models, and plot a line graph to show.\n",
    "def compareVars2(g, gs, S, its, models, vss):\n",
    "    values = []\n",
    "    order = 0\n",
    "    for model in models:\n",
    "        for c, vs in enumerate(vss):\n",
    "            if vs[0] == 'pp':\n",
    "                startTime = time()\n",
    "                values.append([cascade(gs[g], S, its, model, pp=v) for v in vs[2]])\n",
    "                print(\"Variable: \" + vs[0] + \"\\n\" + str(values[order]) + \"\\n\" + \n",
    "                      str(round((time() - startTime), 5)) + \" secs\\n\") \n",
    "                vs[1] = order\n",
    "                order += 1\n",
    "            elif vs[0] == 'qf':\n",
    "                startTime = time()\n",
    "                values.append([cascade(gs[g], S, its, model, qf=v) for v in vs[2]])\n",
    "                print(\"Variable: \" + vs[0] + \"\\n\" + str(values[order]) + \"\\n\" + \n",
    "                      str(round((time() - startTime), 5)) + \" secs\\n\")        \n",
    "                vs[1] = order\n",
    "                order += 1\n",
    "            elif vs[0] == 'sf':\n",
    "                startTime = time()\n",
    "                values.append([cascade(gs[g], S, its, model, sf=v) for v in vs[2]])\n",
    "                print(\"Variable: \" + vs[0] + \"\\n\" + str(values[order]) + \"\\n\" + \n",
    "                      str(round((time() - startTime), 5)) + \" secs\\n\")        \n",
    "                vs[1] = order\n",
    "                order += 1\n",
    "            else:\n",
    "                startTime = time()\n",
    "                values.append([cascade(gs[g], S, its, model, tf=v) for v in vs[2]])\n",
    "                print(\"Variable: \" + vs[0] + \"\\n\" + str(values[order]) + \"\\n\" + \n",
    "                      str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "                vs[1] = order\n",
    "                order += 1\n",
    "    figs, axs = plt.subplots(figsize=(10,6))\n",
    "    axs.set_xlabel(\"Variable Probabilities\")\n",
    "    axs.set_ylabel(\"Spread\")\n",
    "    axs.set_title(g + \"\\n\" + \n",
    "                  \"Probabilitiy Comparison: \" + model)\n",
    "    for c, vs in enumerate(values):\n",
    "        axs.plot(vss[0][2], vs, label=(models[c] + \" \" + vss[0][0]), marker='o', markersize=4)\n",
    "    axs.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Facebook\n",
      "seed set: {1321, 2835, 2003, 5079, 2522}\n",
      "0.00097 secs\n",
      "\n",
      "Variable: pp\n",
      "[5.0, 175.575, 492.975, 705.475, 888.28, 993.09, 1161.515, 1297.86, 1440.695, 1652.71, 1750.32]\n",
      "305.58914 secs\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-305.8354 secs\n"
     ]
    }
   ],
   "source": [
    "#pp experiment for IC\n",
    "qty, its, model, gs = 5, 200, 'IC', [graphs]\n",
    "vss = [['pp', 0, [x*0.1 for x in range(11)]]]\n",
    "startTime = time()\n",
    "s = randomSeeds(graphs['BitcoinOTC'], qty)\n",
    "print(g + \"\\nseed set: \" + str(s) + \"\\n\" +  \n",
    "      str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "compareVars('BitcoinOTC', graphs, s, its, model, vss)\n",
    "print(str(round((startTime - time()), 4)) + \" secs\")\n",
    "\n",
    "#306 secs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Facebook\n",
      "seed set: {3202, 4114, 1429, 1176, 4063}\n",
      "0.00103 secs\n",
      "\n",
      "Variable: pp\n",
      "[5.0, 141.24, 484.26, 632.68, 801.22, 1121.22, 1304.0, 1379.32, 1409.36, 1679.7, 1771.94]\n",
      "82.10204 secs\n",
      "\n",
      "Variable: pp\n",
      "[1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02]\n",
      "115.25361 secs\n",
      "\n",
      "Variable: pp\n",
      "[1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22]\n",
      "113.36931 secs\n",
      "\n",
      "[0.0, 0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0]\n",
      "[5.0, 141.24, 484.26, 632.68, 801.22, 1121.22, 1304.0, 1379.32, 1409.36, 1679.7, 1771.94]\n",
      "IC pp\n",
      "[0.0, 0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0]\n",
      "[1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02, 1339.02]\n",
      "WC1 pp\n",
      "[0.0, 0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0]\n",
      "[1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22, 1167.22]\n",
      "WC2 pp\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-310.982 secs\n"
     ]
    }
   ],
   "source": [
    "#pp experiment for all models\n",
    "qty, its, models, gs = 5, 50, ['IC','WC1','WC2'], [graphs]\n",
    "vss = [['pp', 0, [x*0.1 for x in range(11)]]]\n",
    "startTime = time()\n",
    "s = randomSeeds(graphs['BitcoinOTC'], qty)\n",
    "print(g + \"\\nseed set: \" + str(s) + \"\\n\" +  \n",
    "      str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "compareVars2('BitcoinOTC', graphs, s, its, models, vss)\n",
    "print(str(round((startTime - time()), 4)) + \" secs\")\n",
    "\n",
    "#306 secs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Facebook\n",
      "seed set: {3621, 1265, 1459, 5782, 1686}\n",
      "0.003 secs\n",
      "\n",
      "Variable: qf\n",
      "[4.68, 5.48, 8.52, 20.445, 53.055, 142.055, 366.84, 737.4, 1281.56, 1742.62, 2093.95]\n",
      "300.54458 secs\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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2CUlDPWoiYiIyD7LLyzmqtHTKHHnsYsGKKRVM/WoiYiIyD67ffxc5qzeypOXZNGpheakVTf1qImIiMg+eWnKKsZOWcXVx3bjuF6twy4nISmoiYiIyF6bszqPP70xhyO7t+B3xx8YdjkJS0FNRERE9krezkKuGj2N5g3q8NB5/UlNsbBLSliaoyYiIiJVVlLiXPvSTNbl5fPiLw6nRcO6YZeU0NSjJiIiIlX2yMeL+e+CDfzp1F4M6Ngs7HISnoKaiIiIVMlni3L424dfM7RfWy4e0inscpKCgpqIiIhUas2WXVwzdiY9WjXknjP7YKZ5abVBQU1ERET2qKComKtGT2d3UQmPXnQY9etointt0TctIiIie/Tnt+bz1aotPHrhALplNgy7nKSiHjURERGp0Gszsnlu4gpGHN2Vk/q0CbucpKOgJiIiIuVasG4rN746m0FdmnP9ibqobRgU1EREROR7tuYXctXz02mUkc6/LuhPWqoiQxg0R01ERES+w935w8tfsXLTTsZcMYRWjTLCLilpKR6LiIjIdzz+6VLen7ueG086iEFdmoddTlJTUBMREZFvfLkkl/veW8DJfQ5g+FFdwi4n6SmoiYiICADrt+bz6zHT6dyyAfeffaguahsDFNRERESEwuISrh49nZ27i/n3RYfRsK6msccCHQURERHhnncWMHXFZh46vz89WjcKuxwJqEdNREQkyb01aw0jP1/GpUd05vRD24ZdjkRRUBMREUliizds4/pxszisUzNuOvngsMuRMhTUREREktT2giJ+8dw06tdJ5eELBlAnTbEg1miOmoiISBJyd/74yiyWbdzB85cP5oAmuqhtLFJ0FhERSUJPf76ct2et5Q8nHsQR3VqGXY5UQEFNREQkyUxdvom/vDOf43u15spjuoZdjuyBgpqIiEgSydlWwC9HT6d9s3r87Rxd1DbW1VhQM7ORZrbBzOZEtd1uZqvNbGbwc3LUshvNbLGZLTSzE6PafxK0LTazG2qqXhERkURXVFzCr8dMZ2t+IY9edBiNM9LDLkkqUZM9as8APymn/QF37xf8vANgZr2A84DewTaPmFmqmaUCDwMnAb2A84N1RUREZC/99YOFTFy6ib+c0YeD2zQOuxypgho769PdPzWzzlVcfSgw1t0LgGVmthgYFCxb7O5LAcxsbLDuvOquV0REJJG9N2cd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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-300.7081 secs\n"
     ]
    }
   ],
   "source": [
    "#qf experiment for IC\n",
    "qty, its, model, gs = 5, 200, 'IC', [graphs]\n",
    "vss = [['qf', 0, [x*0.1 for x in range(11)]]]\n",
    "startTime = time()\n",
    "s = randomSeeds(graphs['BitcoinOTC'], qty)\n",
    "print(g + \"\\nseed set: \" + str(s) + \"\\n\" + \n",
    "      str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "compareVars('BitcoinOTC', graphs, s, its, model, vss)\n",
    "print(str(round((startTime - time()), 4)) + \" secs\")\n",
    "\n",
    "#300 secs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Facebook\n",
      "seed set: {3937, 646, 428, 2780, 2846}\n",
      "0.001 secs\n",
      "\n",
      "Variable: qf\n",
      "[3.46, 5.58, 12.98, 41.02, 115.88, 339.12, 711.82, 1274.3, 1810.94, 2261.46, 2537.36]\n",
      "101.01104 secs\n",
      "\n",
      "Variable: qf\n",
      "[1.9, 6.9, 32.94, 114.76, 321.86, 715.68, 1376.0, 2239.36, 3373.06, 4028.04, 4337.28]\n",
      "127.11087 secs\n",
      "\n",
      "Variable: qf\n",
      "[1.64, 8.48, 47.96, 131.64, 420.02, 931.94, 1654.22, 2529.9, 3601.96, 4228.86, 4507.32]\n",
      "133.1171 secs\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-361.502 secs\n"
     ]
    }
   ],
   "source": [
    "#qf experiment for all models\n",
    "qty, its, model, gs = 5, 50, ['IC','WC1','WC2'], [graphs]\n",
    "vss = [['qf', 0, [x*0.1 for x in range(11)]]]\n",
    "startTime = time()\n",
    "s = randomSeeds(graphs['BitcoinOTC'], qty)\n",
    "print(g + \"\\nseed set: \" + str(s) + \"\\n\" + \n",
    "      str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "compareVars2('BitcoinOTC', graphs, s, its, model, vss)\n",
    "print(str(round((startTime - time()), 4)) + \" secs\")\n",
    "\n",
    "#300 secs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Facebook\n",
      "seed set: {2433, 1220, 4390, 1687, 4440}\n",
      "0.00197 secs\n",
      "\n",
      "Variable: sf\n",
      "[447.14, 444.49, 448.485, 453.34, 458.22, 465.975, 471.335, 475.865, 489.37, 505.175, 533.4]\n",
      "291.53651 secs\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-291.6945 secs\n"
     ]
    }
   ],
   "source": [
    "#switch factor experiment for IC\n",
    "qty, its, model, gs = 5, 200, 'IC', [graphs]\n",
    "vss = [['sf', 0, [x*0.1 for x in range(11)]]]\n",
    "\n",
    "startTime = time()\n",
    "s = randomSeeds(graphs['BitcoinOTC'], qty)\n",
    "print(g + \"\\nseed set: \" + str(s) + \"\\n\" + \n",
    "      str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "compareVars('BitcoinOTC', graphs, s, its, model, vss)\n",
    "print(str(round((startTime - time()), 4)) + \" secs\")\n",
    "\n",
    "#290 secs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Facebook\n",
      "seed set: {360, 4239, 2579, 5079, 2174}\n",
      "0.001 secs\n",
      "\n",
      "Variable: sf\n",
      "[709.56, 702.12, 719.14, 725.78, 719.38, 753.54, 762.92, 770.4, 785.72, 807.32, 850.12]\n",
      "93.46903 secs\n",
      "\n",
      "Variable: sf\n",
      "[1284.48, 1305.88, 1316.66, 1325.56, 1327.92, 1352.78, 1385.3, 1429.14, 1490.48, 1558.1, 1680.32]\n",
      "111.94959 secs\n",
      "\n",
      "Variable: sf\n",
      "[1573.18, 1585.14, 1585.08, 1598.3, 1641.58, 1655.9, 1688.32, 1735.2, 1791.78, 1887.68, 2019.46]\n",
      "115.70514 secs\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-321.4037 secs\n"
     ]
    }
   ],
   "source": [
    "#switch factor experiment for all models\n",
    "qty, its, model, gs = 5, 50, ['IC','WC1','WC2'], [graphs]\n",
    "vss = [['sf', 0, [x*0.1 for x in range(11)]]]\n",
    "\n",
    "startTime = time()\n",
    "s = randomSeeds(graphs['BitcoinOTC'], qty)\n",
    "print(g + \"\\nseed set: \" + str(s) + \"\\n\" + \n",
    "      str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "compareVars2('BitcoinOTC', graphs, s, its, model, vss)\n",
    "print(str(round((startTime - time()), 4)) + \" secs\")\n",
    "\n",
    "#290 secs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Facebook\n",
      "seed set: {3106, 3495, 5675, 2261, 727}\n",
      "0.001 secs\n",
      "\n",
      "Variable: tf\n",
      "[788.06, 772.05, 742.25, 713.16, 698.435, 670.355, 523.51, 369.295, 260.8, 140.935, 135.925, 123.2, 101.03, 73.77, 18.26]\n",
      "361.5312 secs\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-361.8292 secs\n"
     ]
    }
   ],
   "source": [
    "#time factor experiment for IC\n",
    "qty, its, model, gs = 5, 200, 'IC', [graphs]\n",
    "vss = [['tf', 0, [x*0.02 for x in range(5)] + [y*0.1 for y in range(1,11)]]]\n",
    "startTime = time()\n",
    "s = randomSeeds(graphs['BitcoinOTC'], qty)\n",
    "print(g + \"\\nseed set: \" + str(s) + \"\\n\" + \n",
    "      str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "compareVars('BitcoinOTC', graphs, s, its, model, vss)\n",
    "print(str(round((startTime - time()), 4)) + \" secs\")\n",
    "\n",
    "#280 secs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Facebook\n",
      "seed set: {3493, 618, 5387, 4047, 3642}\n",
      "0.002 secs\n",
      "\n",
      "Variable: tf\n",
      "[415.86, 411.36, 406.14, 379.12, 357.7, 340.2, 227.08, 123.18, 71.0, 31.32, 30.94, 25.68, 23.7, 14.8, 5.9]\n",
      "47.51502 secs\n",
      "\n",
      "Variable: tf\n",
      "[672.3, 670.68, 657.88, 658.3, 651.4, 640.54, 487.52, 248.32, 124.9, 37.34, 40.08, 38.2, 29.9, 17.34, 6.12]\n",
      "66.64007 secs\n",
      "\n",
      "Variable: tf\n",
      "[723.32, 730.2, 697.14, 716.2, 682.72, 670.8, 544.88, 363.48, 204.86, 55.26, 67.4, 58.92, 41.56, 24.84, 5.68]\n",
      "63.5918 secs\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-178.0939 secs\n"
     ]
    }
   ],
   "source": [
    "#time factor experiment for all models\n",
    "qty, its, model, gs = 5, 50, ['IC','WC1','WC2'], [graphs]\n",
    "vss = [['tf', 0, [x*0.02 for x in range(5)] + [y*0.1 for y in range(1,11)]]]\n",
    "startTime = time()\n",
    "s = randomSeeds(graphs['BitcoinOTC'], qty)\n",
    "print(g + \"\\nseed set: \" + str(s) + \"\\n\" + \n",
    "      str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "compareVars2('BitcoinOTC', graphs, s, its, model, vss)\n",
    "print(str(round((startTime - time()), 4)) + \" secs\")\n",
    "\n",
    "#280 secs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BitcoinOTC\n",
      "seed set: {3493, 686, 4761, 3161, 4573}\n",
      "0.001 secs\n",
      "\n",
      "Variable: qf\n",
      "[3.305, 5.765, 15.075, 40.545, 112.69, 287.395, 643.07, 1197.44, 1768.655, 2235.035, 2535.135]\n",
      "436.22117 secs\n",
      "\n",
      "Variable: sf\n",
      "[599.995, 605.115, 603.535, 611.74, 621.575, 621.43, 631.395, 643.07, 659.245, 679.52, 714.73]\n",
      "385.17162 secs\n",
      "\n",
      "Variable: pp\n",
      "[5.0, 302.2, 643.07, 850.02, 1080.62, 1201.935, 1356.215, 1443.76, 1570.335, 1694.87, 1823.04]\n",
      "372.93096 secs\n",
      "\n",
      "Variable: tf\n",
      "[684.23, 659.195, 643.07, 615.655, 599.07, 567.785, 402.625, 250.9, 147.01, 62.29, 64.17, 61.08, 50.92, 37.67, 14.705]\n",
      "311.56475 secs\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1506.1485 secs\n"
     ]
    }
   ],
   "source": [
    "#all parameters experiment\n",
    "qty, its, model = 5, 200, 'IC'\n",
    "vss = [['qf', 0, [x*0.1 for x in range(11)]],\n",
    "       ['sf', 0, [x*0.1 for x in range(11)]],\n",
    "       ['pp', 0, [x*0.1 for x in range(11)]],\n",
    "       ['tf', 0, [x*0.02 for x in range(5)] + [y*0.1 for y in range(1,11)]]]\n",
    "startTime = time()\n",
    "s = randomSeeds(graphs['BitcoinOTC'], qty)\n",
    "print('BitcoinOTC' + \"\\nseed set: \" + str(s) + \"\\n\" + \n",
    "      str(round((time() - startTime), 5)) + \" secs\\n\")\n",
    "compareVars('BitcoinOTC', graphs, s, its, model, vss)\n",
    "print(str(round((startTime - time()), 4)) + \" secs\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PP = 0.2\n",
      "QF = 0.2\n",
      "Test IC 19.5\n",
      "1.67603 secs\n",
      "\n",
      "Test WC1 44.0\n",
      "2.24247 secs\n",
      "\n",
      "Test WC2 122.0\n",
      "2.607 secs\n",
      "\n",
      "PP = 0.2\n",
      "QF = 0.8\n",
      "Test IC 1858.3\n",
      "2.025 secs\n",
      "\n",
      "Test WC1 3461.8\n",
      "2.569 secs\n",
      "\n",
      "Test WC2 3798.7\n",
      "2.718 secs\n",
      "\n",
      "PP = 0.8\n",
      "QF = 0.2\n",
      "Test IC 121.1\n",
      "1.784 secs\n",
      "\n",
      "Test WC1 44.0\n",
      "2.27304 secs\n",
      "\n",
      "Test WC2 122.0\n",
      "2.36097 secs\n",
      "\n",
      "PP = 0.8\n",
      "QF = 0.8\n",
      "Test IC 3732.6\n",
      "2.035 secs\n",
      "\n",
      "Test WC1 3461.8\n",
      "2.48851 secs\n",
      "\n",
      "Test WC2 3798.7\n",
      "2.594 secs\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Basic propagation probability & quality factor test\n",
    "g, s, its = graphs['BitcoinOTC'], {1}, 10\n",
    "def TestRun(g, s, its, p=0.2, q=0.6):\n",
    "    t = time()\n",
    "    print(\"Test IC \" + str(cascade(g, s, its, pp=p, qf=q))) #Independent Cascade is default\n",
    "    print(str(round((time()-t),5)) + \" secs\\n\")\n",
    "    t = time()\n",
    "    print(\"Test WC1 \" + str(cascade(g, s, its, model='WC1', pp=p, qf=q))) #Weighted Cascade 1\n",
    "    print(str(round((time()-t),5)) + \" secs\\n\")\n",
    "    t = time()\n",
    "    print(\"Test WC2 \" + str(cascade(g, s, its, model='WC2', pp=p, qf=q))) #Weighted Cascade 2\n",
    "    print(str(round((time()-t),5)) + \" secs\\n\")\n",
    "\n",
    "#TestRun(g, s, its)\n",
    "\n",
    "for vals in [(0.2, 0.2), (0.2, 0.8), (0.8, 0.2), (0.8, 0.8)]:\n",
    "    print(\"PP = \" + str(vals[0]) + \"\\nQF = \" + str(vals[1]))\n",
    "    TestRun(g, s, its, vals[0], vals[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
